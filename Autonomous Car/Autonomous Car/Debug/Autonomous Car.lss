
Autonomous Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000007c6  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800088  00800088  00000882  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001476  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4a  00000000  00000000  0000284f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  0000339c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  000035c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e9  00000000  00000000  00003a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000414c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	
	motion_init();
  92:	0e 94 c9 01 	call	0x392	; 0x392 <motion_init>
	servo_init();
  96:	0e 94 17 02 	call	0x42e	; 0x42e <servo_init>
	LCD_Init();
  9a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_Init>
	ultrasonic_init();
  9e:	0e 94 42 02 	call	0x484	; 0x484 <ultrasonic_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f e3       	ldi	r18, 0x3F	; 63
  a4:	8d e0       	ldi	r24, 0x0D	; 13
  a6:	93 e0       	ldi	r25, 0x03	; 3
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
  b2:	00 00       	nop
	
	while(1)
	{
		
		
		ultrasonic_triger();
  b4:	0e 94 4b 02 	call	0x496	; 0x496 <ultrasonic_triger>
  b8:	85 ea       	ldi	r24, 0xA5	; 165
  ba:	9e e0       	ldi	r25, 0x0E	; 14
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x30>
  c2:	00 00       	nop
		_delay_ms(15);
		
		if (distance>15)
  c4:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <distance>
  c8:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <distance+0x1>
  cc:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <distance+0x2>
  d0:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <distance+0x3>
  d4:	40 97       	sbiw	r24, 0x10	; 16
  d6:	a1 05       	cpc	r26, r1
  d8:	b1 05       	cpc	r27, r1
  da:	24 f0       	brlt	.+8      	; 0xe4 <main+0x52>
		{
			forward();
  dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <forward>
			LCD_Forward();
  e0:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Forward>
			
		}

		if(distance < 15)
  e4:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <distance>
  e8:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <distance+0x1>
  ec:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <distance+0x2>
  f0:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <distance+0x3>
  f4:	0f 97       	sbiw	r24, 0x0f	; 15
  f6:	a1 05       	cpc	r26, r1
  f8:	b1 05       	cpc	r27, r1
  fa:	e4 f6       	brge	.-72     	; 0xb4 <main+0x22>
		{
			stop();
  fc:	0e 94 0a 02 	call	0x414	; 0x414 <stop>
			LCD_STOPPED();
 100:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_STOPPED>
 104:	9f e9       	ldi	r25, 0x9F	; 159
 106:	26 e8       	ldi	r18, 0x86	; 134
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	91 50       	subi	r25, 0x01	; 1
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x78>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x82>
 114:	00 00       	nop
			_delay_ms(500);
			
			Servo_Left();
 116:	0e 94 35 02 	call	0x46a	; 0x46a <Servo_Left>
 11a:	9f e9       	ldi	r25, 0x9F	; 159
 11c:	2b eb       	ldi	r18, 0xBB	; 187
 11e:	8d e0       	ldi	r24, 0x0D	; 13
 120:	91 50       	subi	r25, 0x01	; 1
 122:	20 40       	sbci	r18, 0x00	; 0
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x8e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x98>
 12a:	00 00       	nop
			_delay_ms(4500);
			
			ultrasonic_triger();
 12c:	0e 94 4b 02 	call	0x496	; 0x496 <ultrasonic_triger>
 130:	85 ea       	ldi	r24, 0xA5	; 165
 132:	9e e0       	ldi	r25, 0x0E	; 14
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0xa2>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xa8>
 13a:	00 00       	nop
			_delay_ms(15);
			
			if(distance > 15)
 13c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <distance>
 140:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <distance+0x1>
 144:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <distance+0x2>
 148:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <distance+0x3>
 14c:	80 31       	cpi	r24, 0x10	; 16
 14e:	91 05       	cpc	r25, r1
 150:	a1 05       	cpc	r26, r1
 152:	b1 05       	cpc	r27, r1
 154:	dc f0       	brlt	.+54     	; 0x18c <main+0xfa>
			{
				Servo_Right();
 156:	0e 94 28 02 	call	0x450	; 0x450 <Servo_Right>
 15a:	9f e9       	ldi	r25, 0x9F	; 159
 15c:	2b eb       	ldi	r18, 0xBB	; 187
 15e:	8d e0       	ldi	r24, 0x0D	; 13
 160:	91 50       	subi	r25, 0x01	; 1
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0xce>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xd8>
 16a:	00 00       	nop
				_delay_ms(4500);
				
				Servo_Front();
 16c:	0e 94 1b 02 	call	0x436	; 0x436 <Servo_Front>
				
				left();
 170:	0e 94 fd 01 	call	0x3fa	; 0x3fa <left>
				LCD_Left();
 174:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_Left>
 178:	9f e9       	ldi	r25, 0x9F	; 159
 17a:	2a e4       	ldi	r18, 0x4A	; 74
 17c:	8b e0       	ldi	r24, 0x0B	; 11
 17e:	91 50       	subi	r25, 0x01	; 1
 180:	20 40       	sbci	r18, 0x00	; 0
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0xec>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0xf6>
 188:	00 00       	nop
 18a:	94 cf       	rjmp	.-216    	; 0xb4 <main+0x22>
				_delay_ms(3700);
				
			}
			
			else if(distance < 15)
 18c:	0f 97       	sbiw	r24, 0x0f	; 15
 18e:	a1 05       	cpc	r26, r1
 190:	b1 05       	cpc	r27, r1
 192:	0c f0       	brlt	.+2      	; 0x196 <main+0x104>
 194:	8f cf       	rjmp	.-226    	; 0xb4 <main+0x22>
			{
				Servo_Right();
 196:	0e 94 28 02 	call	0x450	; 0x450 <Servo_Right>
 19a:	9f e9       	ldi	r25, 0x9F	; 159
 19c:	2b eb       	ldi	r18, 0xBB	; 187
 19e:	8d e0       	ldi	r24, 0x0D	; 13
 1a0:	91 50       	subi	r25, 0x01	; 1
 1a2:	20 40       	sbci	r18, 0x00	; 0
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x10e>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x118>
 1aa:	00 00       	nop
				_delay_ms(4500);
				
				ultrasonic_triger();
 1ac:	0e 94 4b 02 	call	0x496	; 0x496 <ultrasonic_triger>
 1b0:	85 ea       	ldi	r24, 0xA5	; 165
 1b2:	9e e0       	ldi	r25, 0x0E	; 14
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x122>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x128>
 1ba:	00 00       	nop
				_delay_ms(15);
				
				if (distance < 15)
 1bc:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <distance>
 1c0:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <distance+0x1>
 1c4:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <distance+0x2>
 1c8:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <distance+0x3>
 1cc:	8f 30       	cpi	r24, 0x0F	; 15
 1ce:	91 05       	cpc	r25, r1
 1d0:	a1 05       	cpc	r26, r1
 1d2:	b1 05       	cpc	r27, r1
 1d4:	84 f4       	brge	.+32     	; 0x1f6 <main+0x164>
				{
					Servo_Front();
 1d6:	0e 94 1b 02 	call	0x436	; 0x436 <Servo_Front>
					Xturn();
 1da:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Xturn>
					LCD_Xturn();
 1de:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_Xturn>
 1e2:	9f ef       	ldi	r25, 0xFF	; 255
 1e4:	28 ef       	ldi	r18, 0xF8	; 248
 1e6:	85 e1       	ldi	r24, 0x15	; 21
 1e8:	91 50       	subi	r25, 0x01	; 1
 1ea:	20 40       	sbci	r18, 0x00	; 0
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x156>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x160>
 1f2:	00 00       	nop
 1f4:	5f cf       	rjmp	.-322    	; 0xb4 <main+0x22>
					_delay_ms(7200);
					
				}
				
				else if (distance > 15)
 1f6:	40 97       	sbiw	r24, 0x10	; 16
 1f8:	a1 05       	cpc	r26, r1
 1fa:	b1 05       	cpc	r27, r1
 1fc:	0c f4       	brge	.+2      	; 0x200 <main+0x16e>
 1fe:	5a cf       	rjmp	.-332    	; 0xb4 <main+0x22>
				{
					Servo_Front();
 200:	0e 94 1b 02 	call	0x436	; 0x436 <Servo_Front>
					right();
 204:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <right>
					LCD_Right();
 208:	0e 94 93 01 	call	0x326	; 0x326 <LCD_Right>
 20c:	9f e9       	ldi	r25, 0x9F	; 159
 20e:	2a e4       	ldi	r18, 0x4A	; 74
 210:	8b e0       	ldi	r24, 0x0B	; 11
 212:	91 50       	subi	r25, 0x01	; 1
 214:	20 40       	sbci	r18, 0x00	; 0
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x180>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x18a>
 21c:	00 00       	nop
 21e:	4a cf       	rjmp	.-364    	; 0xb4 <main+0x22>

00000220 <LCD_Command>:

#include "Lcd.h"

void LCD_Command (char cmd)							
{
	LCD_Data_Port = cmd;							
 220:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			
 222:	85 b3       	in	r24, 0x15	; 21
 224:	8c 7f       	andi	r24, 0xFC	; 252
 226:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					
 228:	85 b3       	in	r24, 0x15	; 21
 22a:	84 60       	ori	r24, 0x04	; 4
 22c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 230:	85 b3       	in	r24, 0x15	; 21
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8d ee       	ldi	r24, 0xED	; 237
 238:	92 e0       	ldi	r25, 0x02	; 2
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Command+0x1a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Command+0x20>
 240:	00 00       	nop
 242:	08 95       	ret

00000244 <LCD_Char>:
	_delay_ms(3);									
}

void LCD_Char (char char_data)						
{
	LCD_Data_Port = char_data;						
 244:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					
 246:	85 b3       	in	r24, 0x15	; 21
 248:	8d 7f       	andi	r24, 0xFD	; 253
 24a:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			
 24c:	85 b3       	in	r24, 0x15	; 21
 24e:	85 60       	ori	r24, 0x05	; 5
 250:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 254:	85 b3       	in	r24, 0x15	; 21
 256:	8b 7f       	andi	r24, 0xFB	; 251
 258:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25a:	89 ef       	ldi	r24, 0xF9	; 249
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_Char+0x1a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_Char+0x20>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <LCD_Init>:
	_delay_ms(1);									
}

void LCD_Init (void)								
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		
 268:	84 b3       	in	r24, 0x14	; 20
 26a:	87 60       	ori	r24, 0x07	; 7
 26c:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	87 bb       	out	0x17, r24	; 23
 272:	87 e8       	ldi	r24, 0x87	; 135
 274:	93 e1       	ldi	r25, 0x13	; 19
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_Init+0xe>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_Init+0x14>
 27c:	00 00       	nop
	
	_delay_ms(20);									
	LCD_Command (0x38);								
 27e:	88 e3       	ldi	r24, 0x38	; 56
 280:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Command>
	LCD_Command (0x0C);								
 284:	8c e0       	ldi	r24, 0x0C	; 12
 286:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Command>
	LCD_Command (0x06);								
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Command>
	LCD_Command (0x01);								
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Command>
	LCD_Command (0x80);								
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Command>
 29c:	08 95       	ret

0000029e <LCD_String>:
}

void LCD_String (char *str)							
{
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)							
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <LCD_String+0x16>
	{
		LCD_Char (str[i]);							
 2ae:	0e 94 22 01 	call	0x244	; 0x244 <LCD_Char>
}

void LCD_String (char *str)							
{
	int i;
	for(i=0;str[i]!=0;i++)							
 2b2:	21 96       	adiw	r28, 0x01	; 1
 2b4:	f8 01       	movw	r30, r16
 2b6:	ec 0f       	add	r30, r28
 2b8:	fd 1f       	adc	r31, r29
 2ba:	80 81       	ld	r24, Z
 2bc:	81 11       	cpse	r24, r1
 2be:	f7 cf       	rjmp	.-18     	; 0x2ae <LCD_String+0x10>
	{
		LCD_Char (str[i]);							
	}
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	08 95       	ret

000002ca <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ea 01       	movw	r28, r20
	if (row == 1)
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	31 f4       	brne	.+12     	; 0x2e0 <LCD_String_xy+0x16>
	LCD_Command((pos & 0x0F)|0x80);				
 2d4:	86 2f       	mov	r24, r22
 2d6:	8f 70       	andi	r24, 0x0F	; 15
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Command>
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <LCD_String_xy+0x24>
	else if (row == 2)
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	29 f4       	brne	.+10     	; 0x2ee <LCD_String_xy+0x24>
	LCD_Command((pos & 0x0F)|0xC0);				
 2e4:	86 2f       	mov	r24, r22
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	80 6c       	ori	r24, 0xC0	; 192
 2ea:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Command>
	LCD_String(str);								
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_String>
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <LCD_Clear>:

void LCD_Clear (void)								
{
	LCD_Command (0x01);								
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Command>
	LCD_Command (0x80);								
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Command>
 306:	08 95       	ret

00000308 <LCD_Forward>:
}


void LCD_Forward(void)
{
	LCD_Clear();
 308:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Clear>
	LCD_String_xy(1,0,"MOVING");
 30c:	40 e6       	ldi	r20, 0x60	; 96
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String_xy>
	LCD_String_xy(2,5,"FORWARD");
 318:	47 e6       	ldi	r20, 0x67	; 103
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	65 e0       	ldi	r22, 0x05	; 5
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String_xy>
 324:	08 95       	ret

00000326 <LCD_Right>:
}

void LCD_Right(void)
{
	LCD_Clear();
 326:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Clear>
	LCD_String_xy(1,0,"MOVING");
 32a:	40 e6       	ldi	r20, 0x60	; 96
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String_xy>
	LCD_String_xy(2,5,"RIGHT");
 336:	4f e6       	ldi	r20, 0x6F	; 111
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	65 e0       	ldi	r22, 0x05	; 5
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String_xy>
 342:	08 95       	ret

00000344 <LCD_Left>:
}

void LCD_Left(void)
{
	LCD_Clear();
 344:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Clear>
	LCD_String_xy(1,0,"MOVING");
 348:	40 e6       	ldi	r20, 0x60	; 96
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String_xy>
	LCD_String_xy(2,5,"LEFT");
 354:	45 e7       	ldi	r20, 0x75	; 117
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	65 e0       	ldi	r22, 0x05	; 5
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String_xy>
 360:	08 95       	ret

00000362 <LCD_Xturn>:
}

void LCD_Xturn(void)
{
	LCD_Clear();
 362:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Clear>
	LCD_String_xy(1,0,"MOVING");
 366:	40 e6       	ldi	r20, 0x60	; 96
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String_xy>
	LCD_String_xy(2,5,"XTURN");
 372:	4a e7       	ldi	r20, 0x7A	; 122
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	65 e0       	ldi	r22, 0x05	; 5
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String_xy>
 37e:	08 95       	ret

00000380 <LCD_STOPPED>:
}

void LCD_STOPPED(void)
{
	LCD_Clear();
 380:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_Clear>
	LCD_String_xy(1,4,"STOPPED");
 384:	40 e8       	ldi	r20, 0x80	; 128
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	64 e0       	ldi	r22, 0x04	; 4
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_String_xy>
 390:	08 95       	ret

00000392 <motion_init>:
#include "Motion.h"

void motion_init(void)
{

	DDRC  |= ( 1<<PINC3) ;
 392:	84 b3       	in	r24, 0x14	; 20
 394:	88 60       	ori	r24, 0x08	; 8
 396:	84 bb       	out	0x14, r24	; 20
	DDRC  |= ( 1<<PINC4) ;
 398:	84 b3       	in	r24, 0x14	; 20
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	84 bb       	out	0x14, r24	; 20
	DDRC  |= ( 1<<PINC5) ;
 39e:	84 b3       	in	r24, 0x14	; 20
 3a0:	80 62       	ori	r24, 0x20	; 32
 3a2:	84 bb       	out	0x14, r24	; 20
	DDRC  |= ( 1<<PINC6) ;
 3a4:	84 b3       	in	r24, 0x14	; 20
 3a6:	80 64       	ori	r24, 0x40	; 64
 3a8:	84 bb       	out	0x14, r24	; 20
 3aa:	08 95       	ret

000003ac <forward>:
	
}

void forward()
{
	PORTC  |=   (1<<PINC3) ;
 3ac:	85 b3       	in	r24, 0x15	; 21
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC4) ;
 3b2:	85 b3       	in	r24, 0x15	; 21
 3b4:	8f 7e       	andi	r24, 0xEF	; 239
 3b6:	85 bb       	out	0x15, r24	; 21
	PORTC  |=   (1<<PINC5) ;
 3b8:	85 b3       	in	r24, 0x15	; 21
 3ba:	80 62       	ori	r24, 0x20	; 32
 3bc:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC6) ;
 3be:	85 b3       	in	r24, 0x15	; 21
 3c0:	8f 7b       	andi	r24, 0xBF	; 191
 3c2:	85 bb       	out	0x15, r24	; 21
 3c4:	08 95       	ret

000003c6 <Xturn>:
}

void Xturn(void)
{
	PORTC  |=   (1<<PINC3) ;
 3c6:	85 b3       	in	r24, 0x15	; 21
 3c8:	88 60       	ori	r24, 0x08	; 8
 3ca:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC4) ;
 3cc:	85 b3       	in	r24, 0x15	; 21
 3ce:	8f 7e       	andi	r24, 0xEF	; 239
 3d0:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC5) ;
 3d2:	85 b3       	in	r24, 0x15	; 21
 3d4:	8f 7d       	andi	r24, 0xDF	; 223
 3d6:	85 bb       	out	0x15, r24	; 21
	PORTC  |=   (1<<PINC6) ;
 3d8:	85 b3       	in	r24, 0x15	; 21
 3da:	80 64       	ori	r24, 0x40	; 64
 3dc:	85 bb       	out	0x15, r24	; 21
 3de:	08 95       	ret

000003e0 <right>:
}

void right(void)
{
	PORTC  |=   (1<<PINC3) ;
 3e0:	85 b3       	in	r24, 0x15	; 21
 3e2:	88 60       	ori	r24, 0x08	; 8
 3e4:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC4) ;
 3e6:	85 b3       	in	r24, 0x15	; 21
 3e8:	8f 7e       	andi	r24, 0xEF	; 239
 3ea:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC5) ;
 3ec:	85 b3       	in	r24, 0x15	; 21
 3ee:	8f 7d       	andi	r24, 0xDF	; 223
 3f0:	85 bb       	out	0x15, r24	; 21
	PORTC  |=   (1<<PINC6) ;
 3f2:	85 b3       	in	r24, 0x15	; 21
 3f4:	80 64       	ori	r24, 0x40	; 64
 3f6:	85 bb       	out	0x15, r24	; 21
 3f8:	08 95       	ret

000003fa <left>:
}

void left(void)
{
	PORTC  &= ~ (1<<PINC3) ;
 3fa:	85 b3       	in	r24, 0x15	; 21
 3fc:	87 7f       	andi	r24, 0xF7	; 247
 3fe:	85 bb       	out	0x15, r24	; 21
	PORTC  |=   (1<<PINC4) ;
 400:	85 b3       	in	r24, 0x15	; 21
 402:	80 61       	ori	r24, 0x10	; 16
 404:	85 bb       	out	0x15, r24	; 21
	PORTC  |=   (1<<PINC5) ;
 406:	85 b3       	in	r24, 0x15	; 21
 408:	80 62       	ori	r24, 0x20	; 32
 40a:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC6) ;
 40c:	85 b3       	in	r24, 0x15	; 21
 40e:	8f 7b       	andi	r24, 0xBF	; 191
 410:	85 bb       	out	0x15, r24	; 21
 412:	08 95       	ret

00000414 <stop>:
}

void stop(void)
{
	PORTC  &= ~ (1<<PINC3) ;
 414:	85 b3       	in	r24, 0x15	; 21
 416:	87 7f       	andi	r24, 0xF7	; 247
 418:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC4) ;
 41a:	85 b3       	in	r24, 0x15	; 21
 41c:	8f 7e       	andi	r24, 0xEF	; 239
 41e:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC5) ;
 420:	85 b3       	in	r24, 0x15	; 21
 422:	8f 7d       	andi	r24, 0xDF	; 223
 424:	85 bb       	out	0x15, r24	; 21
	PORTC  &= ~ (1<<PINC6) ;
 426:	85 b3       	in	r24, 0x15	; 21
 428:	8f 7b       	andi	r24, 0xBF	; 191
 42a:	85 bb       	out	0x15, r24	; 21
 42c:	08 95       	ret

0000042e <servo_init>:


void servo_init (void)
{
	
	DDRD  |= ( 1<<PIND7) ;
 42e:	81 b3       	in	r24, 0x11	; 17
 430:	80 68       	ori	r24, 0x80	; 128
 432:	81 bb       	out	0x11, r24	; 17
 434:	08 95       	ret

00000436 <Servo_Front>:
}


void Servo_Front(void)
{
	PORTD  |=  ( 1<<PIND7) ;
 436:	82 b3       	in	r24, 0x12	; 18
 438:	80 68       	ori	r24, 0x80	; 128
 43a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43c:	89 e3       	ldi	r24, 0x39	; 57
 43e:	97 e0       	ldi	r25, 0x07	; 7
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <Servo_Front+0xa>
 444:	00 c0       	rjmp	.+0      	; 0x446 <Servo_Front+0x10>
 446:	00 00       	nop
	_delay_us(7400);
	PORTD  &= ~( 1<<PIND7) ;
 448:	82 b3       	in	r24, 0x12	; 18
 44a:	8f 77       	andi	r24, 0x7F	; 127
 44c:	82 bb       	out	0x12, r24	; 18
 44e:	08 95       	ret

00000450 <Servo_Right>:
}

void Servo_Right(void)
{
	
	PORTD  |=  ( 1<<PIND7) ;
 450:	82 b3       	in	r24, 0x12	; 18
 452:	80 68       	ori	r24, 0x80	; 128
 454:	82 bb       	out	0x12, r24	; 18
 456:	8f e8       	ldi	r24, 0x8F	; 143
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <Servo_Right+0xa>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <Servo_Right+0x10>
 460:	00 00       	nop
	_delay_us(1600);
	PORTD  &= ~( 1<<PIND7) ;
 462:	82 b3       	in	r24, 0x12	; 18
 464:	8f 77       	andi	r24, 0x7F	; 127
 466:	82 bb       	out	0x12, r24	; 18
 468:	08 95       	ret

0000046a <Servo_Left>:

}

void Servo_Left(void)
{
	PORTD  |=  ( 1<<PIND7) ;
 46a:	82 b3       	in	r24, 0x12	; 18
 46c:	80 68       	ori	r24, 0x80	; 128
 46e:	82 bb       	out	0x12, r24	; 18
 470:	88 e7       	ldi	r24, 0x78	; 120
 472:	99 e0       	ldi	r25, 0x09	; 9
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <Servo_Left+0xa>
 478:	00 c0       	rjmp	.+0      	; 0x47a <Servo_Left+0x10>
 47a:	00 00       	nop
	_delay_us(9700);
	PORTD  &= ~( 1<<PIND7) ;
 47c:	82 b3       	in	r24, 0x12	; 18
 47e:	8f 77       	andi	r24, 0x7F	; 127
 480:	82 bb       	out	0x12, r24	; 18
 482:	08 95       	ret

00000484 <ultrasonic_init>:

void ultrasonic_init(void)
{

	
	DDRA = 0x01;		
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	8a bb       	out	0x1a, r24	; 26
	PORTD = 0xFF;		
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	82 bb       	out	0x12, r24	; 18
	sei();
 48c:	78 94       	sei
	TIMSK = (1 << TOIE1);	
 48e:	84 e0       	ldi	r24, 0x04	; 4
 490:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;		
 492:	1f bc       	out	0x2f, r1	; 47
 494:	08 95       	ret

00000496 <ultrasonic_triger>:

void ultrasonic_triger(void){



	PORTA |= (1 << Trigger_pin);
 496:	8b b3       	in	r24, 0x1b	; 27
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	8b bb       	out	0x1b, r24	; 27
 49c:	83 e0       	ldi	r24, 0x03	; 3
 49e:	8a 95       	dec	r24
 4a0:	f1 f7       	brne	.-4      	; 0x49e <ultrasonic_triger+0x8>
 4a2:	00 00       	nop
	_delay_us(10);
	PORTA &= (~(1 << Trigger_pin));
 4a4:	8b b3       	in	r24, 0x1b	; 27
 4a6:	8e 7f       	andi	r24, 0xFE	; 254
 4a8:	8b bb       	out	0x1b, r24	; 27
	
	TCNT1 = 0;
 4aa:	1d bc       	out	0x2d, r1	; 45
 4ac:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x41;
 4ae:	81 e4       	ldi	r24, 0x41	; 65
 4b0:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;	
 4b2:	80 e2       	ldi	r24, 0x20	; 32
 4b4:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;	
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	88 bf       	out	0x38, r24	; 56

	
	
	while ((TIFR & (1 << ICF1)) == 0);
 4ba:	08 b6       	in	r0, 0x38	; 56
 4bc:	05 fe       	sbrs	r0, 5
 4be:	fd cf       	rjmp	.-6      	; 0x4ba <ultrasonic_triger+0x24>
	TCNT1 = 0;	
 4c0:	1d bc       	out	0x2d, r1	; 45
 4c2:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x01;	
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;	
 4c8:	80 e2       	ldi	r24, 0x20	; 32
 4ca:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;	
 4cc:	84 e0       	ldi	r24, 0x04	; 4
 4ce:	88 bf       	out	0x38, r24	; 56
	TimerOverflow = 0;
 4d0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 4d4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>

	while ((TIFR & (1 << ICF1)) == 0);
 4d8:	08 b6       	in	r0, 0x38	; 56
 4da:	05 fe       	sbrs	r0, 5
 4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <ultrasonic_triger+0x42>
	count = ICR1 + (65535 * TimerOverflow);	
 4de:	66 b5       	in	r22, 0x26	; 38
 4e0:	77 b5       	in	r23, 0x27	; 39
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	60 93 8e 00 	sts	0x008E, r22	; 0x80008e <count>
 4ea:	70 93 8f 00 	sts	0x008F, r23	; 0x80008f <count+0x1>
 4ee:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <count+0x2>
 4f2:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <count+0x3>
	
	distance = (double)count / 466.47;
 4f6:	0e 94 55 03 	call	0x6aa	; 0x6aa <__floatsisf>
 4fa:	29 e2       	ldi	r18, 0x29	; 41
 4fc:	3c e3       	ldi	r19, 0x3C	; 60
 4fe:	49 ee       	ldi	r20, 0xE9	; 233
 500:	53 e4       	ldi	r21, 0x43	; 67
 502:	0e 94 ab 02 	call	0x556	; 0x556 <__divsf3>
 506:	0e 94 1d 03 	call	0x63a	; 0x63a <__fixsfsi>
 50a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <distance>
 50e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <distance+0x1>
 512:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <distance+0x2>
 516:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <distance+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51a:	8f e4       	ldi	r24, 0x4F	; 79
 51c:	93 ec       	ldi	r25, 0xC3	; 195
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <ultrasonic_triger+0x88>
 522:	00 c0       	rjmp	.+0      	; 0x524 <ultrasonic_triger+0x8e>
 524:	00 00       	nop
 526:	08 95       	ret

00000528 <__vector_9>:
	_delay_ms(200);
	
}

ISR(TIMER1_OVF_vect)
{
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	8f 93       	push	r24
 534:	9f 93       	push	r25
	TimerOverflow++;	
 536:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 53a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 544:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <__divsf3>:
 556:	0e 94 bf 02 	call	0x57e	; 0x57e <__divsf3x>
 55a:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__fp_round>
 55e:	0e 94 a0 03 	call	0x740	; 0x740 <__fp_pscB>
 562:	58 f0       	brcs	.+22     	; 0x57a <__divsf3+0x24>
 564:	0e 94 99 03 	call	0x732	; 0x732 <__fp_pscA>
 568:	40 f0       	brcs	.+16     	; 0x57a <__divsf3+0x24>
 56a:	29 f4       	brne	.+10     	; 0x576 <__divsf3+0x20>
 56c:	5f 3f       	cpi	r21, 0xFF	; 255
 56e:	29 f0       	breq	.+10     	; 0x57a <__divsf3+0x24>
 570:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_inf>
 574:	51 11       	cpse	r21, r1
 576:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_szero>
 57a:	0c 94 96 03 	jmp	0x72c	; 0x72c <__fp_nan>

0000057e <__divsf3x>:
 57e:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_split3>
 582:	68 f3       	brcs	.-38     	; 0x55e <__divsf3+0x8>

00000584 <__divsf3_pse>:
 584:	99 23       	and	r25, r25
 586:	b1 f3       	breq	.-20     	; 0x574 <__divsf3+0x1e>
 588:	55 23       	and	r21, r21
 58a:	91 f3       	breq	.-28     	; 0x570 <__divsf3+0x1a>
 58c:	95 1b       	sub	r25, r21
 58e:	55 0b       	sbc	r21, r21
 590:	bb 27       	eor	r27, r27
 592:	aa 27       	eor	r26, r26
 594:	62 17       	cp	r22, r18
 596:	73 07       	cpc	r23, r19
 598:	84 07       	cpc	r24, r20
 59a:	38 f0       	brcs	.+14     	; 0x5aa <__divsf3_pse+0x26>
 59c:	9f 5f       	subi	r25, 0xFF	; 255
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	22 0f       	add	r18, r18
 5a2:	33 1f       	adc	r19, r19
 5a4:	44 1f       	adc	r20, r20
 5a6:	aa 1f       	adc	r26, r26
 5a8:	a9 f3       	breq	.-22     	; 0x594 <__divsf3_pse+0x10>
 5aa:	35 d0       	rcall	.+106    	; 0x616 <__divsf3_pse+0x92>
 5ac:	0e 2e       	mov	r0, r30
 5ae:	3a f0       	brmi	.+14     	; 0x5be <__divsf3_pse+0x3a>
 5b0:	e0 e8       	ldi	r30, 0x80	; 128
 5b2:	32 d0       	rcall	.+100    	; 0x618 <__divsf3_pse+0x94>
 5b4:	91 50       	subi	r25, 0x01	; 1
 5b6:	50 40       	sbci	r21, 0x00	; 0
 5b8:	e6 95       	lsr	r30
 5ba:	00 1c       	adc	r0, r0
 5bc:	ca f7       	brpl	.-14     	; 0x5b0 <__divsf3_pse+0x2c>
 5be:	2b d0       	rcall	.+86     	; 0x616 <__divsf3_pse+0x92>
 5c0:	fe 2f       	mov	r31, r30
 5c2:	29 d0       	rcall	.+82     	; 0x616 <__divsf3_pse+0x92>
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	bb 1f       	adc	r27, r27
 5cc:	26 17       	cp	r18, r22
 5ce:	37 07       	cpc	r19, r23
 5d0:	48 07       	cpc	r20, r24
 5d2:	ab 07       	cpc	r26, r27
 5d4:	b0 e8       	ldi	r27, 0x80	; 128
 5d6:	09 f0       	breq	.+2      	; 0x5da <__divsf3_pse+0x56>
 5d8:	bb 0b       	sbc	r27, r27
 5da:	80 2d       	mov	r24, r0
 5dc:	bf 01       	movw	r22, r30
 5de:	ff 27       	eor	r31, r31
 5e0:	93 58       	subi	r25, 0x83	; 131
 5e2:	5f 4f       	sbci	r21, 0xFF	; 255
 5e4:	3a f0       	brmi	.+14     	; 0x5f4 <__divsf3_pse+0x70>
 5e6:	9e 3f       	cpi	r25, 0xFE	; 254
 5e8:	51 05       	cpc	r21, r1
 5ea:	78 f0       	brcs	.+30     	; 0x60a <__divsf3_pse+0x86>
 5ec:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_inf>
 5f0:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_szero>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	e4 f3       	brlt	.-8      	; 0x5f0 <__divsf3_pse+0x6c>
 5f8:	98 3e       	cpi	r25, 0xE8	; 232
 5fa:	d4 f3       	brlt	.-12     	; 0x5f0 <__divsf3_pse+0x6c>
 5fc:	86 95       	lsr	r24
 5fe:	77 95       	ror	r23
 600:	67 95       	ror	r22
 602:	b7 95       	ror	r27
 604:	f7 95       	ror	r31
 606:	9f 5f       	subi	r25, 0xFF	; 255
 608:	c9 f7       	brne	.-14     	; 0x5fc <__divsf3_pse+0x78>
 60a:	88 0f       	add	r24, r24
 60c:	91 1d       	adc	r25, r1
 60e:	96 95       	lsr	r25
 610:	87 95       	ror	r24
 612:	97 f9       	bld	r25, 7
 614:	08 95       	ret
 616:	e1 e0       	ldi	r30, 0x01	; 1
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	bb 1f       	adc	r27, r27
 620:	62 17       	cp	r22, r18
 622:	73 07       	cpc	r23, r19
 624:	84 07       	cpc	r24, r20
 626:	ba 07       	cpc	r27, r26
 628:	20 f0       	brcs	.+8      	; 0x632 <__divsf3_pse+0xae>
 62a:	62 1b       	sub	r22, r18
 62c:	73 0b       	sbc	r23, r19
 62e:	84 0b       	sbc	r24, r20
 630:	ba 0b       	sbc	r27, r26
 632:	ee 1f       	adc	r30, r30
 634:	88 f7       	brcc	.-30     	; 0x618 <__divsf3_pse+0x94>
 636:	e0 95       	com	r30
 638:	08 95       	ret

0000063a <__fixsfsi>:
 63a:	0e 94 24 03 	call	0x648	; 0x648 <__fixunssfsi>
 63e:	68 94       	set
 640:	b1 11       	cpse	r27, r1
 642:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_szero>
 646:	08 95       	ret

00000648 <__fixunssfsi>:
 648:	0e 94 c0 03 	call	0x780	; 0x780 <__fp_splitA>
 64c:	88 f0       	brcs	.+34     	; 0x670 <__fixunssfsi+0x28>
 64e:	9f 57       	subi	r25, 0x7F	; 127
 650:	98 f0       	brcs	.+38     	; 0x678 <__fixunssfsi+0x30>
 652:	b9 2f       	mov	r27, r25
 654:	99 27       	eor	r25, r25
 656:	b7 51       	subi	r27, 0x17	; 23
 658:	b0 f0       	brcs	.+44     	; 0x686 <__fixunssfsi+0x3e>
 65a:	e1 f0       	breq	.+56     	; 0x694 <__fixunssfsi+0x4c>
 65c:	66 0f       	add	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	88 1f       	adc	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	1a f0       	brmi	.+6      	; 0x66c <__fixunssfsi+0x24>
 666:	ba 95       	dec	r27
 668:	c9 f7       	brne	.-14     	; 0x65c <__fixunssfsi+0x14>
 66a:	14 c0       	rjmp	.+40     	; 0x694 <__fixunssfsi+0x4c>
 66c:	b1 30       	cpi	r27, 0x01	; 1
 66e:	91 f0       	breq	.+36     	; 0x694 <__fixunssfsi+0x4c>
 670:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_zero>
 674:	b1 e0       	ldi	r27, 0x01	; 1
 676:	08 95       	ret
 678:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__fp_zero>
 67c:	67 2f       	mov	r22, r23
 67e:	78 2f       	mov	r23, r24
 680:	88 27       	eor	r24, r24
 682:	b8 5f       	subi	r27, 0xF8	; 248
 684:	39 f0       	breq	.+14     	; 0x694 <__fixunssfsi+0x4c>
 686:	b9 3f       	cpi	r27, 0xF9	; 249
 688:	cc f3       	brlt	.-14     	; 0x67c <__fixunssfsi+0x34>
 68a:	86 95       	lsr	r24
 68c:	77 95       	ror	r23
 68e:	67 95       	ror	r22
 690:	b3 95       	inc	r27
 692:	d9 f7       	brne	.-10     	; 0x68a <__fixunssfsi+0x42>
 694:	3e f4       	brtc	.+14     	; 0x6a4 <__fixunssfsi+0x5c>
 696:	90 95       	com	r25
 698:	80 95       	com	r24
 69a:	70 95       	com	r23
 69c:	61 95       	neg	r22
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	08 95       	ret

000006a6 <__floatunsisf>:
 6a6:	e8 94       	clt
 6a8:	09 c0       	rjmp	.+18     	; 0x6bc <__floatsisf+0x12>

000006aa <__floatsisf>:
 6aa:	97 fb       	bst	r25, 7
 6ac:	3e f4       	brtc	.+14     	; 0x6bc <__floatsisf+0x12>
 6ae:	90 95       	com	r25
 6b0:	80 95       	com	r24
 6b2:	70 95       	com	r23
 6b4:	61 95       	neg	r22
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	99 23       	and	r25, r25
 6be:	a9 f0       	breq	.+42     	; 0x6ea <__floatsisf+0x40>
 6c0:	f9 2f       	mov	r31, r25
 6c2:	96 e9       	ldi	r25, 0x96	; 150
 6c4:	bb 27       	eor	r27, r27
 6c6:	93 95       	inc	r25
 6c8:	f6 95       	lsr	r31
 6ca:	87 95       	ror	r24
 6cc:	77 95       	ror	r23
 6ce:	67 95       	ror	r22
 6d0:	b7 95       	ror	r27
 6d2:	f1 11       	cpse	r31, r1
 6d4:	f8 cf       	rjmp	.-16     	; 0x6c6 <__floatsisf+0x1c>
 6d6:	fa f4       	brpl	.+62     	; 0x716 <__floatsisf+0x6c>
 6d8:	bb 0f       	add	r27, r27
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__floatsisf+0x36>
 6dc:	60 ff       	sbrs	r22, 0
 6de:	1b c0       	rjmp	.+54     	; 0x716 <__floatsisf+0x6c>
 6e0:	6f 5f       	subi	r22, 0xFF	; 255
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	16 c0       	rjmp	.+44     	; 0x716 <__floatsisf+0x6c>
 6ea:	88 23       	and	r24, r24
 6ec:	11 f0       	breq	.+4      	; 0x6f2 <__floatsisf+0x48>
 6ee:	96 e9       	ldi	r25, 0x96	; 150
 6f0:	11 c0       	rjmp	.+34     	; 0x714 <__floatsisf+0x6a>
 6f2:	77 23       	and	r23, r23
 6f4:	21 f0       	breq	.+8      	; 0x6fe <__floatsisf+0x54>
 6f6:	9e e8       	ldi	r25, 0x8E	; 142
 6f8:	87 2f       	mov	r24, r23
 6fa:	76 2f       	mov	r23, r22
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <__floatsisf+0x5e>
 6fe:	66 23       	and	r22, r22
 700:	71 f0       	breq	.+28     	; 0x71e <__floatsisf+0x74>
 702:	96 e8       	ldi	r25, 0x86	; 134
 704:	86 2f       	mov	r24, r22
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	2a f0       	brmi	.+10     	; 0x716 <__floatsisf+0x6c>
 70c:	9a 95       	dec	r25
 70e:	66 0f       	add	r22, r22
 710:	77 1f       	adc	r23, r23
 712:	88 1f       	adc	r24, r24
 714:	da f7       	brpl	.-10     	; 0x70c <__floatsisf+0x62>
 716:	88 0f       	add	r24, r24
 718:	96 95       	lsr	r25
 71a:	87 95       	ror	r24
 71c:	97 f9       	bld	r25, 7
 71e:	08 95       	ret

00000720 <__fp_inf>:
 720:	97 f9       	bld	r25, 7
 722:	9f 67       	ori	r25, 0x7F	; 127
 724:	80 e8       	ldi	r24, 0x80	; 128
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	08 95       	ret

0000072c <__fp_nan>:
 72c:	9f ef       	ldi	r25, 0xFF	; 255
 72e:	80 ec       	ldi	r24, 0xC0	; 192
 730:	08 95       	ret

00000732 <__fp_pscA>:
 732:	00 24       	eor	r0, r0
 734:	0a 94       	dec	r0
 736:	16 16       	cp	r1, r22
 738:	17 06       	cpc	r1, r23
 73a:	18 06       	cpc	r1, r24
 73c:	09 06       	cpc	r0, r25
 73e:	08 95       	ret

00000740 <__fp_pscB>:
 740:	00 24       	eor	r0, r0
 742:	0a 94       	dec	r0
 744:	12 16       	cp	r1, r18
 746:	13 06       	cpc	r1, r19
 748:	14 06       	cpc	r1, r20
 74a:	05 06       	cpc	r0, r21
 74c:	08 95       	ret

0000074e <__fp_round>:
 74e:	09 2e       	mov	r0, r25
 750:	03 94       	inc	r0
 752:	00 0c       	add	r0, r0
 754:	11 f4       	brne	.+4      	; 0x75a <__fp_round+0xc>
 756:	88 23       	and	r24, r24
 758:	52 f0       	brmi	.+20     	; 0x76e <__fp_round+0x20>
 75a:	bb 0f       	add	r27, r27
 75c:	40 f4       	brcc	.+16     	; 0x76e <__fp_round+0x20>
 75e:	bf 2b       	or	r27, r31
 760:	11 f4       	brne	.+4      	; 0x766 <__fp_round+0x18>
 762:	60 ff       	sbrs	r22, 0
 764:	04 c0       	rjmp	.+8      	; 0x76e <__fp_round+0x20>
 766:	6f 5f       	subi	r22, 0xFF	; 255
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f 4f       	sbci	r24, 0xFF	; 255
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	08 95       	ret

00000770 <__fp_split3>:
 770:	57 fd       	sbrc	r21, 7
 772:	90 58       	subi	r25, 0x80	; 128
 774:	44 0f       	add	r20, r20
 776:	55 1f       	adc	r21, r21
 778:	59 f0       	breq	.+22     	; 0x790 <__fp_splitA+0x10>
 77a:	5f 3f       	cpi	r21, 0xFF	; 255
 77c:	71 f0       	breq	.+28     	; 0x79a <__fp_splitA+0x1a>
 77e:	47 95       	ror	r20

00000780 <__fp_splitA>:
 780:	88 0f       	add	r24, r24
 782:	97 fb       	bst	r25, 7
 784:	99 1f       	adc	r25, r25
 786:	61 f0       	breq	.+24     	; 0x7a0 <__fp_splitA+0x20>
 788:	9f 3f       	cpi	r25, 0xFF	; 255
 78a:	79 f0       	breq	.+30     	; 0x7aa <__fp_splitA+0x2a>
 78c:	87 95       	ror	r24
 78e:	08 95       	ret
 790:	12 16       	cp	r1, r18
 792:	13 06       	cpc	r1, r19
 794:	14 06       	cpc	r1, r20
 796:	55 1f       	adc	r21, r21
 798:	f2 cf       	rjmp	.-28     	; 0x77e <__fp_split3+0xe>
 79a:	46 95       	lsr	r20
 79c:	f1 df       	rcall	.-30     	; 0x780 <__fp_splitA>
 79e:	08 c0       	rjmp	.+16     	; 0x7b0 <__fp_splitA+0x30>
 7a0:	16 16       	cp	r1, r22
 7a2:	17 06       	cpc	r1, r23
 7a4:	18 06       	cpc	r1, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	f1 cf       	rjmp	.-30     	; 0x78c <__fp_splitA+0xc>
 7aa:	86 95       	lsr	r24
 7ac:	71 05       	cpc	r23, r1
 7ae:	61 05       	cpc	r22, r1
 7b0:	08 94       	sec
 7b2:	08 95       	ret

000007b4 <__fp_zero>:
 7b4:	e8 94       	clt

000007b6 <__fp_szero>:
 7b6:	bb 27       	eor	r27, r27
 7b8:	66 27       	eor	r22, r22
 7ba:	77 27       	eor	r23, r23
 7bc:	cb 01       	movw	r24, r22
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
